Terminals unused in grammar

    CONST
    IN
    LET


Grammar

    0 $accept: begin $end

    1 primary_expression: IDENTIFIER
    2                   | constant
    3                   | '(' expression ')'
    4                   | NULL_

    5 constant: I_CONST
    6         | F_CONST
    7         | C_CONST
    8         | S_CONST
    9         | B_CONST

   10 postfix_expression: primary_expression
   11                   | postfix_expression '[' expression ']'
   12                   | postfix_expression INC_OP
   13                   | postfix_expression DEC_OP
   14                   | postfix_expression '.' IDENTIFIER

   15 $@1: %empty

   16 postfix_expression: postfix_expression '.' IDENTIFIER '(' $@1 functionCall

   17 $@2: %empty

   18 postfix_expression: IDENTIFIER '(' $@2 functionCall

   19 functionCall: ')'
   20             | argument_list ')'

   21 argument_list: expression
   22              | argument_list ',' expression

   23 unary_expression: postfix_expression
   24                 | INC_OP unary_expression
   25                 | DEC_OP unary_expression
   26                 | unary_operator unary_expression
   27                 | LEN '(' IDENTIFIER ')'
   28                 | SIZEOF '(' IDENTIFIER ')'
   29                 | SIZEOF '(' type_name ')'
   30                 | MALLOC '(' expression ')'

   31 type_name: INT
   32          | FLOAT
   33          | CHAR
   34          | STRING
   35          | BOOL
   36          | VAR IDENTIFIER

   37 unary_operator: '+'
   38               | '-'
   39               | '!'
   40               | '*'
   41               | '&'

   42 multiplicative_expression: unary_expression
   43                          | multiplicative_expression '*' unary_expression
   44                          | multiplicative_expression '/' unary_expression
   45                          | multiplicative_expression '%' unary_expression

   46 additive_expression: multiplicative_expression
   47                    | additive_expression '+' multiplicative_expression
   48                    | additive_expression '-' multiplicative_expression

   49 relational_expression: additive_expression
   50                      | relational_expression '<' additive_expression
   51                      | relational_expression '>' additive_expression
   52                      | relational_expression LE_OP additive_expression
   53                      | relational_expression GE_OP additive_expression

   54 equality_expression: relational_expression
   55                    | equality_expression EQ_OP relational_expression
   56                    | equality_expression NE_OP relational_expression

   57 logical_and_expression: equality_expression
   58                       | logical_and_expression AND_OP equality_expression

   59 logical_or_expression: logical_and_expression
   60                      | logical_or_expression OR_OP logical_and_expression

   61 expression: logical_or_expression

   62 assignment_operator: '='
   63                    | MUL_ASSIGN
   64                    | DIV_ASSIGN
   65                    | MOD_ASSIGN
   66                    | ADD_ASSIGN
   67                    | SUB_ASSIGN
   68                    | POW_ASSIGN

   69 assignment_expression: unary_expression assignment_operator expression

   70 declaration_expression: type_name declarationlist

   71 declarationlist: declaration ',' declarationlist
   72                | declaration

   73 declaration: stars IDENTIFIER
   74            | stars IDENTIFIER '=' expression

   75 $@3: %empty

   76 declaration: stars IDENTIFIER $@3 brackets

   77 stars: '*' stars
   78      | %empty

   79 $@4: %empty

   80 brackets: '[' expression ']' $@4 brackets
   81         | '[' expression ']'

   82 @5: %empty

   83 $@6: %empty

   84 $@7: %empty

   85 $@8: %empty

   86 conditional_expression: IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement

   87 @9: %empty

   88 $@10: %empty

   89 $@11: %empty

   90 $@12: %empty

   91 else_statement: ELIF '(' expression ')' @9 '{' $@10 statement_list $@11 '}' $@12 else_statement

   92 $@13: %empty

   93 $@14: %empty

   94 else_statement: ELSE '{' $@13 statement_list $@14 '}'
   95               | %empty

   96 statement: assignment_expression ';'
   97          | declaration_expression ';'
   98          | conditional_expression
   99          | for_expression
  100          | expression ';'
  101          | IO_statement ';'
  102          | flow_control_statements ';'
  103          | RETURN expression ';'
  104          | RETURN ';'

  105 flow_control_statements: BREAK
  106                        | CONTINUE

  107 IO_statement: print_statement
  108             | scan_statement

  109 scan_statement: unary_expression '=' SCAN '(' ')'

  110 print_statement: PRINT '(' print_args ')'
  111                | PRINT '(' ')'
  112                | PRINTS '(' print_args ')'

  113 $@15: %empty

  114 print_args: expression ',' $@15 print_args
  115           | expression

  116 $@16: %empty

  117 @17: %empty

  118 $@18: %empty

  119 $@19: %empty

  120 $@20: %empty

  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'

  122 loop_initialization_list: assignment_expression ',' loop_initialization_list
  123                         | assignment_expression
  124                         | declaration_expression
  125                         | %empty

  126 loop_condition: expression
  127               | %empty

  128 loop_increment_list: expression ',' loop_increment_list
  129                    | expression
  130                    | %empty

  131 statement_list: statement statement_list
  132               | statement

  133 $@21: %empty

  134 begin: $@21 blocks

  135 blocks: block blocks
  136       | %empty

  137 block: functionPrefix
  138      | struct_declaration

  139 $@22: %empty

  140 struct_declaration: VAR IDENTIFIER '{' $@22 attributes '}'

  141 attributes: functionPrefix attributes
  142           | attribute attributes
  143           | %empty

  144 attribute: type_name stars IDENTIFIER ';'

  145 dimensions: '[' ']' dimensions
  146           | %empty

  147 $@23: %empty

  148 functionPrefix: VOID MAIN '(' ')' $@23 statement_block

  149 $@24: %empty

  150 functionPrefix: VOID stars IDENTIFIER '(' $@24 functionSuffix

  151 $@25: %empty

  152 functionPrefix: type_name stars IDENTIFIER '(' $@25 functionSuffix

  153 $@26: %empty

  154 functionSuffix: functionArguements ')' $@26 statement_block

  155 $@27: %empty

  156 functionSuffix: ')' $@27 statement_block

  157 functionArguements: type_name stars IDENTIFIER dimensions
  158                   | functionArguements ',' type_name stars IDENTIFIER dimensions

  159 $@28: %empty

  160 statement_block: '{' $@28 statement_list '}'
  161                | '{' '}'


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 39
    '%' (37) 45
    '&' (38) 41
    '(' (40) 3 16 18 27 28 29 30 86 91 109 110 111 112 121 148 150 152
    ')' (41) 3 19 20 27 28 29 30 86 91 109 110 111 112 121 148 154 156
    '*' (42) 40 43 77
    '+' (43) 37 47
    ',' (44) 22 71 114 122 128 158
    '-' (45) 38 48
    '.' (46) 14 16
    '/' (47) 44
    ';' (59) 96 97 100 101 102 103 104 121 144
    '<' (60) 50
    '=' (61) 62 74 109
    '>' (62) 51
    '[' (91) 11 80 81 145
    ']' (93) 11 80 81 145
    '{' (123) 86 91 94 121 140 160 161
    '}' (125) 86 91 94 121 140 160 161
    error (256)
    BREAK (258) 105
    CHAR (259) 33
    CONST (260)
    CONTINUE (261) 106
    ELSE (262) 94
    ELIF (263) 91
    FLOAT (264) 32
    FOR (265) 121
    IN (266)
    IF (267) 86
    INT (268) 31
    RETURN (269) 103 104
    SIZEOF (270) 28 29
    VOID (271) 148 150
    BOOL (272) 35
    STRING (273) 34
    ADD_ASSIGN (274) 66
    SUB_ASSIGN (275) 67
    MUL_ASSIGN (276) 63
    DIV_ASSIGN (277) 64
    MOD_ASSIGN (278) 65
    POW_ASSIGN (279) 68
    INC_OP (280) 12 24
    DEC_OP (281) 13 25
    OR_OP (282) 60
    AND_OP (283) 58
    LE_OP (284) 52
    GE_OP (285) 53
    EQ_OP (286) 55
    NE_OP (287) 56
    C_CONST (288) 7
    S_CONST (289) 8
    B_CONST (290) 9
    I_CONST (291) 5
    F_CONST (292) 6
    IDENTIFIER (293) 1 14 16 18 27 28 36 73 74 76 140 144 150 152 157 158
    LET (294)
    PRINT (295) 110 111
    PRINTS (296) 112
    SCAN (297) 109
    MAIN (298) 148
    LEN (299) 27
    VAR (300) 36 140
    NULL_ (301) 4
    MALLOC (302) 30


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    primary_expression (68)
        on left: 1 2 3 4
        on right: 10
    constant (69)
        on left: 5 6 7 8 9
        on right: 2
    postfix_expression (70)
        on left: 10 11 12 13 14 16 18
        on right: 11 12 13 14 16 23
    $@1 (71)
        on left: 15
        on right: 16
    $@2 (72)
        on left: 17
        on right: 18
    functionCall (73)
        on left: 19 20
        on right: 16 18
    argument_list (74)
        on left: 21 22
        on right: 20 22
    unary_expression (75)
        on left: 23 24 25 26 27 28 29 30
        on right: 24 25 26 42 43 44 45 69 109
    type_name (76)
        on left: 31 32 33 34 35 36
        on right: 29 70 144 152 157 158
    unary_operator (77)
        on left: 37 38 39 40 41
        on right: 26
    multiplicative_expression (78)
        on left: 42 43 44 45
        on right: 43 44 45 46 47 48
    additive_expression (79)
        on left: 46 47 48
        on right: 47 48 49 50 51 52 53
    relational_expression (80)
        on left: 49 50 51 52 53
        on right: 50 51 52 53 54 55 56
    equality_expression (81)
        on left: 54 55 56
        on right: 55 56 57 58
    logical_and_expression (82)
        on left: 57 58
        on right: 58 59 60
    logical_or_expression (83)
        on left: 59 60
        on right: 60 61
    expression (84)
        on left: 61
        on right: 3 11 21 22 30 69 74 80 81 86 91 100 103 114 115 126 128 129
    assignment_operator (85)
        on left: 62 63 64 65 66 67 68
        on right: 69
    assignment_expression (86)
        on left: 69
        on right: 96 122 123
    declaration_expression (87)
        on left: 70
        on right: 97 124
    declarationlist (88)
        on left: 71 72
        on right: 70 71
    declaration (89)
        on left: 73 74 76
        on right: 71 72
    $@3 (90)
        on left: 75
        on right: 76
    stars (91)
        on left: 77 78
        on right: 73 74 76 77 144 150 152 157 158
    brackets (92)
        on left: 80 81
        on right: 76 80
    $@4 (93)
        on left: 79
        on right: 80
    conditional_expression (94)
        on left: 86
        on right: 98
    @5 (95)
        on left: 82
        on right: 86
    $@6 (96)
        on left: 83
        on right: 86
    $@7 (97)
        on left: 84
        on right: 86
    $@8 (98)
        on left: 85
        on right: 86
    else_statement (99)
        on left: 91 94 95
        on right: 86 91
    @9 (100)
        on left: 87
        on right: 91
    $@10 (101)
        on left: 88
        on right: 91
    $@11 (102)
        on left: 89
        on right: 91
    $@12 (103)
        on left: 90
        on right: 91
    $@13 (104)
        on left: 92
        on right: 94
    $@14 (105)
        on left: 93
        on right: 94
    statement (106)
        on left: 96 97 98 99 100 101 102 103 104
        on right: 131 132
    flow_control_statements (107)
        on left: 105 106
        on right: 102
    IO_statement (108)
        on left: 107 108
        on right: 101
    scan_statement (109)
        on left: 109
        on right: 108
    print_statement (110)
        on left: 110 111 112
        on right: 107
    print_args (111)
        on left: 114 115
        on right: 110 112 114
    $@15 (112)
        on left: 113
        on right: 114
    for_expression (113)
        on left: 121
        on right: 99
    $@16 (114)
        on left: 116
        on right: 121
    @17 (115)
        on left: 117
        on right: 121
    $@18 (116)
        on left: 118
        on right: 121
    $@19 (117)
        on left: 119
        on right: 121
    $@20 (118)
        on left: 120
        on right: 121
    loop_initialization_list (119)
        on left: 122 123 124 125
        on right: 121 122
    loop_condition (120)
        on left: 126 127
        on right: 121
    loop_increment_list (121)
        on left: 128 129 130
        on right: 121 128
    statement_list (122)
        on left: 131 132
        on right: 86 91 94 121 131 160
    begin (123)
        on left: 134
        on right: 0
    $@21 (124)
        on left: 133
        on right: 134
    blocks (125)
        on left: 135 136
        on right: 134 135
    block (126)
        on left: 137 138
        on right: 135
    struct_declaration (127)
        on left: 140
        on right: 138
    $@22 (128)
        on left: 139
        on right: 140
    attributes (129)
        on left: 141 142 143
        on right: 140 141 142
    attribute (130)
        on left: 144
        on right: 142
    dimensions (131)
        on left: 145 146
        on right: 145 157 158
    functionPrefix (132)
        on left: 148 150 152
        on right: 137 141
    $@23 (133)
        on left: 147
        on right: 148
    $@24 (134)
        on left: 149
        on right: 150
    $@25 (135)
        on left: 151
        on right: 152
    functionSuffix (136)
        on left: 154 156
        on right: 150 152
    $@26 (137)
        on left: 153
        on right: 154
    $@27 (138)
        on left: 155
        on right: 156
    functionArguements (139)
        on left: 157 158
        on right: 154 158
    statement_block (140)
        on left: 160 161
        on right: 148 154 156
    $@28 (141)
        on left: 159
        on right: 160


State 0

    0 $accept: . begin $end
  133 $@21: . %empty
  134 begin: . $@21 blocks

    $default  reduce using rule 133 ($@21)

    begin  go to state 1
    $@21   go to state 2


State 1

    0 $accept: begin . $end

    $end  shift, and go to state 3


State 2

   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
  134 begin: $@21 . blocks
  135 blocks: . block blocks
  136       | . %empty  [$end]
  137 block: . functionPrefix
  138      | . struct_declaration
  140 struct_declaration: . VAR IDENTIFIER '{' $@22 attributes '}'
  148 functionPrefix: . VOID MAIN '(' ')' $@23 statement_block
  150               | . VOID stars IDENTIFIER '(' $@24 functionSuffix
  152               | . type_name stars IDENTIFIER '(' $@25 functionSuffix

    CHAR    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    VAR     shift, and go to state 10

    $default  reduce using rule 136 (blocks)

    type_name           go to state 11
    blocks              go to state 12
    block               go to state 13
    struct_declaration  go to state 14
    functionPrefix      go to state 15


State 3

    0 $accept: begin $end .

    $default  accept


State 4

   33 type_name: CHAR .

    $default  reduce using rule 33 (type_name)


State 5

   32 type_name: FLOAT .

    $default  reduce using rule 32 (type_name)


State 6

   31 type_name: INT .

    $default  reduce using rule 31 (type_name)


State 7

   77 stars: . '*' stars
   78      | . %empty  [IDENTIFIER]
  148 functionPrefix: VOID . MAIN '(' ')' $@23 statement_block
  150               | VOID . stars IDENTIFIER '(' $@24 functionSuffix

    MAIN  shift, and go to state 16
    '*'   shift, and go to state 17

    $default  reduce using rule 78 (stars)

    stars  go to state 18


State 8

   35 type_name: BOOL .

    $default  reduce using rule 35 (type_name)


State 9

   34 type_name: STRING .

    $default  reduce using rule 34 (type_name)


State 10

   36 type_name: VAR . IDENTIFIER
  140 struct_declaration: VAR . IDENTIFIER '{' $@22 attributes '}'

    IDENTIFIER  shift, and go to state 19


State 11

   77 stars: . '*' stars
   78      | . %empty  [IDENTIFIER]
  152 functionPrefix: type_name . stars IDENTIFIER '(' $@25 functionSuffix

    '*'  shift, and go to state 17

    $default  reduce using rule 78 (stars)

    stars  go to state 20


State 12

  134 begin: $@21 blocks .

    $default  reduce using rule 134 (begin)


State 13

   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
  135 blocks: . block blocks
  135       | block . blocks
  136       | . %empty  [$end]
  137 block: . functionPrefix
  138      | . struct_declaration
  140 struct_declaration: . VAR IDENTIFIER '{' $@22 attributes '}'
  148 functionPrefix: . VOID MAIN '(' ')' $@23 statement_block
  150               | . VOID stars IDENTIFIER '(' $@24 functionSuffix
  152               | . type_name stars IDENTIFIER '(' $@25 functionSuffix

    CHAR    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    VAR     shift, and go to state 10

    $default  reduce using rule 136 (blocks)

    type_name           go to state 11
    blocks              go to state 21
    block               go to state 13
    struct_declaration  go to state 14
    functionPrefix      go to state 15


State 14

  138 block: struct_declaration .

    $default  reduce using rule 138 (block)


State 15

  137 block: functionPrefix .

    $default  reduce using rule 137 (block)


State 16

  148 functionPrefix: VOID MAIN . '(' ')' $@23 statement_block

    '('  shift, and go to state 22


State 17

   77 stars: . '*' stars
   77      | '*' . stars
   78      | . %empty  [IDENTIFIER]

    '*'  shift, and go to state 17

    $default  reduce using rule 78 (stars)

    stars  go to state 23


State 18

  150 functionPrefix: VOID stars . IDENTIFIER '(' $@24 functionSuffix

    IDENTIFIER  shift, and go to state 24


State 19

   36 type_name: VAR IDENTIFIER .  [IDENTIFIER, '*']
  140 struct_declaration: VAR IDENTIFIER . '{' $@22 attributes '}'

    '{'  shift, and go to state 25

    $default  reduce using rule 36 (type_name)


State 20

  152 functionPrefix: type_name stars . IDENTIFIER '(' $@25 functionSuffix

    IDENTIFIER  shift, and go to state 26


State 21

  135 blocks: block blocks .

    $default  reduce using rule 135 (blocks)


State 22

  148 functionPrefix: VOID MAIN '(' . ')' $@23 statement_block

    ')'  shift, and go to state 27


State 23

   77 stars: '*' stars .

    $default  reduce using rule 77 (stars)


State 24

  150 functionPrefix: VOID stars IDENTIFIER . '(' $@24 functionSuffix

    '('  shift, and go to state 28


State 25

  139 $@22: . %empty
  140 struct_declaration: VAR IDENTIFIER '{' . $@22 attributes '}'

    $default  reduce using rule 139 ($@22)

    $@22  go to state 29


State 26

  152 functionPrefix: type_name stars IDENTIFIER . '(' $@25 functionSuffix

    '('  shift, and go to state 30


State 27

  147 $@23: . %empty
  148 functionPrefix: VOID MAIN '(' ')' . $@23 statement_block

    $default  reduce using rule 147 ($@23)

    $@23  go to state 31


State 28

  149 $@24: . %empty
  150 functionPrefix: VOID stars IDENTIFIER '(' . $@24 functionSuffix

    $default  reduce using rule 149 ($@24)

    $@24  go to state 32


State 29

   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
  140 struct_declaration: VAR IDENTIFIER '{' $@22 . attributes '}'
  141 attributes: . functionPrefix attributes
  142           | . attribute attributes
  143           | . %empty  ['}']
  144 attribute: . type_name stars IDENTIFIER ';'
  148 functionPrefix: . VOID MAIN '(' ')' $@23 statement_block
  150               | . VOID stars IDENTIFIER '(' $@24 functionSuffix
  152               | . type_name stars IDENTIFIER '(' $@25 functionSuffix

    CHAR    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    VAR     shift, and go to state 33

    $default  reduce using rule 143 (attributes)

    type_name       go to state 34
    attributes      go to state 35
    attribute       go to state 36
    functionPrefix  go to state 37


State 30

  151 $@25: . %empty
  152 functionPrefix: type_name stars IDENTIFIER '(' . $@25 functionSuffix

    $default  reduce using rule 151 ($@25)

    $@25  go to state 38


State 31

  148 functionPrefix: VOID MAIN '(' ')' $@23 . statement_block
  160 statement_block: . '{' $@28 statement_list '}'
  161                | . '{' '}'

    '{'  shift, and go to state 39

    statement_block  go to state 40


State 32

   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
  150 functionPrefix: VOID stars IDENTIFIER '(' $@24 . functionSuffix
  154 functionSuffix: . functionArguements ')' $@26 statement_block
  156               | . ')' $@27 statement_block
  157 functionArguements: . type_name stars IDENTIFIER dimensions
  158                   | . functionArguements ',' type_name stars IDENTIFIER dimensions

    CHAR    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    VAR     shift, and go to state 33
    ')'     shift, and go to state 41

    type_name           go to state 42
    functionSuffix      go to state 43
    functionArguements  go to state 44


State 33

   36 type_name: VAR . IDENTIFIER

    IDENTIFIER  shift, and go to state 45


State 34

   77 stars: . '*' stars
   78      | . %empty  [IDENTIFIER]
  144 attribute: type_name . stars IDENTIFIER ';'
  152 functionPrefix: type_name . stars IDENTIFIER '(' $@25 functionSuffix

    '*'  shift, and go to state 17

    $default  reduce using rule 78 (stars)

    stars  go to state 46


State 35

  140 struct_declaration: VAR IDENTIFIER '{' $@22 attributes . '}'

    '}'  shift, and go to state 47


State 36

   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
  141 attributes: . functionPrefix attributes
  142           | . attribute attributes
  142           | attribute . attributes
  143           | . %empty  ['}']
  144 attribute: . type_name stars IDENTIFIER ';'
  148 functionPrefix: . VOID MAIN '(' ')' $@23 statement_block
  150               | . VOID stars IDENTIFIER '(' $@24 functionSuffix
  152               | . type_name stars IDENTIFIER '(' $@25 functionSuffix

    CHAR    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    VAR     shift, and go to state 33

    $default  reduce using rule 143 (attributes)

    type_name       go to state 34
    attributes      go to state 48
    attribute       go to state 36
    functionPrefix  go to state 37


State 37

   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
  141 attributes: . functionPrefix attributes
  141           | functionPrefix . attributes
  142           | . attribute attributes
  143           | . %empty  ['}']
  144 attribute: . type_name stars IDENTIFIER ';'
  148 functionPrefix: . VOID MAIN '(' ')' $@23 statement_block
  150               | . VOID stars IDENTIFIER '(' $@24 functionSuffix
  152               | . type_name stars IDENTIFIER '(' $@25 functionSuffix

    CHAR    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    VOID    shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    VAR     shift, and go to state 33

    $default  reduce using rule 143 (attributes)

    type_name       go to state 34
    attributes      go to state 49
    attribute       go to state 36
    functionPrefix  go to state 37


State 38

   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
  152 functionPrefix: type_name stars IDENTIFIER '(' $@25 . functionSuffix
  154 functionSuffix: . functionArguements ')' $@26 statement_block
  156               | . ')' $@27 statement_block
  157 functionArguements: . type_name stars IDENTIFIER dimensions
  158                   | . functionArguements ',' type_name stars IDENTIFIER dimensions

    CHAR    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    VAR     shift, and go to state 33
    ')'     shift, and go to state 41

    type_name           go to state 42
    functionSuffix      go to state 50
    functionArguements  go to state 44


State 39

  159 $@28: . %empty  [BREAK, CHAR, CONTINUE, FLOAT, FOR, IF, INT, RETURN, SIZEOF, BOOL, STRING, INC_OP, DEC_OP, C_CONST, S_CONST, B_CONST, I_CONST, F_CONST, IDENTIFIER, PRINT, PRINTS, LEN, VAR, NULL_, MALLOC, '(', '+', '-', '!', '*', '&']
  160 statement_block: '{' . $@28 statement_list '}'
  161                | '{' . '}'

    '}'  shift, and go to state 51

    $default  reduce using rule 159 ($@28)

    $@28  go to state 52


State 40

  148 functionPrefix: VOID MAIN '(' ')' $@23 statement_block .

    $default  reduce using rule 148 (functionPrefix)


State 41

  155 $@27: . %empty
  156 functionSuffix: ')' . $@27 statement_block

    $default  reduce using rule 155 ($@27)

    $@27  go to state 53


State 42

   77 stars: . '*' stars
   78      | . %empty  [IDENTIFIER]
  157 functionArguements: type_name . stars IDENTIFIER dimensions

    '*'  shift, and go to state 17

    $default  reduce using rule 78 (stars)

    stars  go to state 54


State 43

  150 functionPrefix: VOID stars IDENTIFIER '(' $@24 functionSuffix .

    $default  reduce using rule 150 (functionPrefix)


State 44

  154 functionSuffix: functionArguements . ')' $@26 statement_block
  158 functionArguements: functionArguements . ',' type_name stars IDENTIFIER dimensions

    ')'  shift, and go to state 55
    ','  shift, and go to state 56


State 45

   36 type_name: VAR IDENTIFIER .

    $default  reduce using rule 36 (type_name)


State 46

  144 attribute: type_name stars . IDENTIFIER ';'
  152 functionPrefix: type_name stars . IDENTIFIER '(' $@25 functionSuffix

    IDENTIFIER  shift, and go to state 57


State 47

  140 struct_declaration: VAR IDENTIFIER '{' $@22 attributes '}' .

    $default  reduce using rule 140 (struct_declaration)


State 48

  142 attributes: attribute attributes .

    $default  reduce using rule 142 (attributes)


State 49

  141 attributes: functionPrefix attributes .

    $default  reduce using rule 141 (attributes)


State 50

  152 functionPrefix: type_name stars IDENTIFIER '(' $@25 functionSuffix .

    $default  reduce using rule 152 (functionPrefix)


State 51

  161 statement_block: '{' '}' .

    $default  reduce using rule 161 (statement_block)


State 52

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   69 assignment_expression: . unary_expression assignment_operator expression
   70 declaration_expression: . type_name declarationlist
   86 conditional_expression: . IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement
   96 statement: . assignment_expression ';'
   97          | . declaration_expression ';'
   98          | . conditional_expression
   99          | . for_expression
  100          | . expression ';'
  101          | . IO_statement ';'
  102          | . flow_control_statements ';'
  103          | . RETURN expression ';'
  104          | . RETURN ';'
  105 flow_control_statements: . BREAK
  106                        | . CONTINUE
  107 IO_statement: . print_statement
  108             | . scan_statement
  109 scan_statement: . unary_expression '=' SCAN '(' ')'
  110 print_statement: . PRINT '(' print_args ')'
  111                | . PRINT '(' ')'
  112                | . PRINTS '(' print_args ')'
  121 for_expression: . FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  131 statement_list: . statement statement_list
  132               | . statement
  160 statement_block: '{' $@28 . statement_list '}'

    BREAK       shift, and go to state 58
    CHAR        shift, and go to state 4
    CONTINUE    shift, and go to state 59
    FLOAT       shift, and go to state 5
    FOR         shift, and go to state 60
    IF          shift, and go to state 61
    INT         shift, and go to state 6
    RETURN      shift, and go to state 62
    SIZEOF      shift, and go to state 63
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    PRINT       shift, and go to state 72
    PRINTS      shift, and go to state 73
    LEN         shift, and go to state 74
    VAR         shift, and go to state 33
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 86
    type_name                  go to state 87
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 95
    assignment_expression      go to state 96
    declaration_expression     go to state 97
    conditional_expression     go to state 98
    statement                  go to state 99
    flow_control_statements    go to state 100
    IO_statement               go to state 101
    scan_statement             go to state 102
    print_statement            go to state 103
    for_expression             go to state 104
    statement_list             go to state 105


State 53

  156 functionSuffix: ')' $@27 . statement_block
  160 statement_block: . '{' $@28 statement_list '}'
  161                | . '{' '}'

    '{'  shift, and go to state 39

    statement_block  go to state 106


State 54

  157 functionArguements: type_name stars . IDENTIFIER dimensions

    IDENTIFIER  shift, and go to state 107


State 55

  153 $@26: . %empty
  154 functionSuffix: functionArguements ')' . $@26 statement_block

    $default  reduce using rule 153 ($@26)

    $@26  go to state 108


State 56

   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
  158 functionArguements: functionArguements ',' . type_name stars IDENTIFIER dimensions

    CHAR    shift, and go to state 4
    FLOAT   shift, and go to state 5
    INT     shift, and go to state 6
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    VAR     shift, and go to state 33

    type_name  go to state 109


State 57

  144 attribute: type_name stars IDENTIFIER . ';'
  152 functionPrefix: type_name stars IDENTIFIER . '(' $@25 functionSuffix

    '('  shift, and go to state 30
    ';'  shift, and go to state 110


State 58

  105 flow_control_statements: BREAK .

    $default  reduce using rule 105 (flow_control_statements)


State 59

  106 flow_control_statements: CONTINUE .

    $default  reduce using rule 106 (flow_control_statements)


State 60

  121 for_expression: FOR . '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'

    '('  shift, and go to state 111


State 61

   86 conditional_expression: IF . '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement

    '('  shift, and go to state 112


State 62

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
  103 statement: RETURN . expression ';'
  104          | RETURN . ';'

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82
    ';'         shift, and go to state 113

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 115


State 63

   28 unary_expression: SIZEOF . '(' IDENTIFIER ')'
   29                 | SIZEOF . '(' type_name ')'

    '('  shift, and go to state 116


State 64

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   24                 | INC_OP . unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression  go to state 83
    constant            go to state 84
    postfix_expression  go to state 85
    unary_expression    go to state 117
    unary_operator      go to state 88


State 65

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   25                 | DEC_OP . unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression  go to state 83
    constant            go to state 84
    postfix_expression  go to state 85
    unary_expression    go to state 118
    unary_operator      go to state 88


State 66

    7 constant: C_CONST .

    $default  reduce using rule 7 (constant)


State 67

    8 constant: S_CONST .

    $default  reduce using rule 8 (constant)


State 68

    9 constant: B_CONST .

    $default  reduce using rule 9 (constant)


State 69

    5 constant: I_CONST .

    $default  reduce using rule 5 (constant)


State 70

    6 constant: F_CONST .

    $default  reduce using rule 6 (constant)


State 71

    1 primary_expression: IDENTIFIER .  [ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, POW_ASSIGN, INC_OP, DEC_OP, OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', '[', ']', '.', ',', '+', '-', '*', '/', '%', '<', '>', '=', ';']
   18 postfix_expression: IDENTIFIER . '(' $@2 functionCall

    '('  shift, and go to state 119

    $default  reduce using rule 1 (primary_expression)


State 72

  110 print_statement: PRINT . '(' print_args ')'
  111                | PRINT . '(' ')'

    '('  shift, and go to state 120


State 73

  112 print_statement: PRINTS . '(' print_args ')'

    '('  shift, and go to state 121


State 74

   27 unary_expression: LEN . '(' IDENTIFIER ')'

    '('  shift, and go to state 122


State 75

    4 primary_expression: NULL_ .

    $default  reduce using rule 4 (primary_expression)


State 76

   30 unary_expression: MALLOC . '(' expression ')'

    '('  shift, and go to state 123


State 77

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    3                   | '(' . expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 124


State 78

   37 unary_operator: '+' .

    $default  reduce using rule 37 (unary_operator)


State 79

   38 unary_operator: '-' .

    $default  reduce using rule 38 (unary_operator)


State 80

   39 unary_operator: '!' .

    $default  reduce using rule 39 (unary_operator)


State 81

   40 unary_operator: '*' .

    $default  reduce using rule 40 (unary_operator)


State 82

   41 unary_operator: '&' .

    $default  reduce using rule 41 (unary_operator)


State 83

   10 postfix_expression: primary_expression .

    $default  reduce using rule 10 (postfix_expression)


State 84

    2 primary_expression: constant .

    $default  reduce using rule 2 (primary_expression)


State 85

   11 postfix_expression: postfix_expression . '[' expression ']'
   12                   | postfix_expression . INC_OP
   13                   | postfix_expression . DEC_OP
   14                   | postfix_expression . '.' IDENTIFIER
   16                   | postfix_expression . '.' IDENTIFIER '(' $@1 functionCall
   23 unary_expression: postfix_expression .  [ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, POW_ASSIGN, OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '+', '-', '*', '/', '%', '<', '>', '=', ';']

    INC_OP  shift, and go to state 125
    DEC_OP  shift, and go to state 126
    '['     shift, and go to state 127
    '.'     shift, and go to state 128

    $default  reduce using rule 23 (unary_expression)


State 86

   42 multiplicative_expression: unary_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, '+', '-', '*', '/', '%', '<', '>', ';']
   62 assignment_operator: . '='
   63                    | . MUL_ASSIGN
   64                    | . DIV_ASSIGN
   65                    | . MOD_ASSIGN
   66                    | . ADD_ASSIGN
   67                    | . SUB_ASSIGN
   68                    | . POW_ASSIGN
   69 assignment_expression: unary_expression . assignment_operator expression
  109 scan_statement: unary_expression . '=' SCAN '(' ')'

    ADD_ASSIGN  shift, and go to state 129
    SUB_ASSIGN  shift, and go to state 130
    MUL_ASSIGN  shift, and go to state 131
    DIV_ASSIGN  shift, and go to state 132
    MOD_ASSIGN  shift, and go to state 133
    POW_ASSIGN  shift, and go to state 134
    '='         shift, and go to state 135

    $default  reduce using rule 42 (multiplicative_expression)

    assignment_operator  go to state 136


State 87

   70 declaration_expression: type_name . declarationlist
   71 declarationlist: . declaration ',' declarationlist
   72                | . declaration
   73 declaration: . stars IDENTIFIER
   74            | . stars IDENTIFIER '=' expression
   76            | . stars IDENTIFIER $@3 brackets
   77 stars: . '*' stars
   78      | . %empty  [IDENTIFIER]

    '*'  shift, and go to state 17

    $default  reduce using rule 78 (stars)

    declarationlist  go to state 137
    declaration      go to state 138
    stars            go to state 139


State 88

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   26                 | unary_operator . unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression  go to state 83
    constant            go to state 84
    postfix_expression  go to state 85
    unary_expression    go to state 140
    unary_operator      go to state 88


State 89

   43 multiplicative_expression: multiplicative_expression . '*' unary_expression
   44                          | multiplicative_expression . '/' unary_expression
   45                          | multiplicative_expression . '%' unary_expression
   46 additive_expression: multiplicative_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '+', '-', '<', '>', ';']

    '*'  shift, and go to state 141
    '/'  shift, and go to state 142
    '%'  shift, and go to state 143

    $default  reduce using rule 46 (additive_expression)


State 90

   47 additive_expression: additive_expression . '+' multiplicative_expression
   48                    | additive_expression . '-' multiplicative_expression
   49 relational_expression: additive_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '<', '>', ';']

    '+'  shift, and go to state 144
    '-'  shift, and go to state 145

    $default  reduce using rule 49 (relational_expression)


State 91

   50 relational_expression: relational_expression . '<' additive_expression
   51                      | relational_expression . '>' additive_expression
   52                      | relational_expression . LE_OP additive_expression
   53                      | relational_expression . GE_OP additive_expression
   54 equality_expression: relational_expression .  [OR_OP, AND_OP, EQ_OP, NE_OP, ')', ']', ',', ';']

    LE_OP  shift, and go to state 146
    GE_OP  shift, and go to state 147
    '<'    shift, and go to state 148
    '>'    shift, and go to state 149

    $default  reduce using rule 54 (equality_expression)


State 92

   55 equality_expression: equality_expression . EQ_OP relational_expression
   56                    | equality_expression . NE_OP relational_expression
   57 logical_and_expression: equality_expression .  [OR_OP, AND_OP, ')', ']', ',', ';']

    EQ_OP  shift, and go to state 150
    NE_OP  shift, and go to state 151

    $default  reduce using rule 57 (logical_and_expression)


State 93

   58 logical_and_expression: logical_and_expression . AND_OP equality_expression
   59 logical_or_expression: logical_and_expression .  [OR_OP, ')', ']', ',', ';']

    AND_OP  shift, and go to state 152

    $default  reduce using rule 59 (logical_or_expression)


State 94

   60 logical_or_expression: logical_or_expression . OR_OP logical_and_expression
   61 expression: logical_or_expression .  [')', ']', ',', ';']

    OR_OP  shift, and go to state 153

    $default  reduce using rule 61 (expression)


State 95

  100 statement: expression . ';'

    ';'  shift, and go to state 154


State 96

   96 statement: assignment_expression . ';'

    ';'  shift, and go to state 155


State 97

   97 statement: declaration_expression . ';'

    ';'  shift, and go to state 156


State 98

   98 statement: conditional_expression .

    $default  reduce using rule 98 (statement)


State 99

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   69 assignment_expression: . unary_expression assignment_operator expression
   70 declaration_expression: . type_name declarationlist
   86 conditional_expression: . IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement
   96 statement: . assignment_expression ';'
   97          | . declaration_expression ';'
   98          | . conditional_expression
   99          | . for_expression
  100          | . expression ';'
  101          | . IO_statement ';'
  102          | . flow_control_statements ';'
  103          | . RETURN expression ';'
  104          | . RETURN ';'
  105 flow_control_statements: . BREAK
  106                        | . CONTINUE
  107 IO_statement: . print_statement
  108             | . scan_statement
  109 scan_statement: . unary_expression '=' SCAN '(' ')'
  110 print_statement: . PRINT '(' print_args ')'
  111                | . PRINT '(' ')'
  112                | . PRINTS '(' print_args ')'
  121 for_expression: . FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  131 statement_list: . statement statement_list
  131               | statement . statement_list
  132               | . statement
  132               | statement .  ['}']

    BREAK       shift, and go to state 58
    CHAR        shift, and go to state 4
    CONTINUE    shift, and go to state 59
    FLOAT       shift, and go to state 5
    FOR         shift, and go to state 60
    IF          shift, and go to state 61
    INT         shift, and go to state 6
    RETURN      shift, and go to state 62
    SIZEOF      shift, and go to state 63
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    PRINT       shift, and go to state 72
    PRINTS      shift, and go to state 73
    LEN         shift, and go to state 74
    VAR         shift, and go to state 33
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    $default  reduce using rule 132 (statement_list)

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 86
    type_name                  go to state 87
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 95
    assignment_expression      go to state 96
    declaration_expression     go to state 97
    conditional_expression     go to state 98
    statement                  go to state 99
    flow_control_statements    go to state 100
    IO_statement               go to state 101
    scan_statement             go to state 102
    print_statement            go to state 103
    for_expression             go to state 104
    statement_list             go to state 157


State 100

  102 statement: flow_control_statements . ';'

    ';'  shift, and go to state 158


State 101

  101 statement: IO_statement . ';'

    ';'  shift, and go to state 159


State 102

  108 IO_statement: scan_statement .

    $default  reduce using rule 108 (IO_statement)


State 103

  107 IO_statement: print_statement .

    $default  reduce using rule 107 (IO_statement)


State 104

   99 statement: for_expression .

    $default  reduce using rule 99 (statement)


State 105

  160 statement_block: '{' $@28 statement_list . '}'

    '}'  shift, and go to state 160


State 106

  156 functionSuffix: ')' $@27 statement_block .

    $default  reduce using rule 156 (functionSuffix)


State 107

  145 dimensions: . '[' ']' dimensions
  146           | . %empty  [')', ',']
  157 functionArguements: type_name stars IDENTIFIER . dimensions

    '['  shift, and go to state 161

    $default  reduce using rule 146 (dimensions)

    dimensions  go to state 162


State 108

  154 functionSuffix: functionArguements ')' $@26 . statement_block
  160 statement_block: . '{' $@28 statement_list '}'
  161                | . '{' '}'

    '{'  shift, and go to state 39

    statement_block  go to state 163


State 109

   77 stars: . '*' stars
   78      | . %empty  [IDENTIFIER]
  158 functionArguements: functionArguements ',' type_name . stars IDENTIFIER dimensions

    '*'  shift, and go to state 17

    $default  reduce using rule 78 (stars)

    stars  go to state 164


State 110

  144 attribute: type_name stars IDENTIFIER ';' .

    $default  reduce using rule 144 (attribute)


State 111

  116 $@16: . %empty
  121 for_expression: FOR '(' . $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'

    $default  reduce using rule 116 ($@16)

    $@16  go to state 165


State 112

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   86 conditional_expression: IF '(' . expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 166


State 113

  104 statement: RETURN ';' .

    $default  reduce using rule 104 (statement)


State 114

   42 multiplicative_expression: unary_expression .

    $default  reduce using rule 42 (multiplicative_expression)


State 115

  103 statement: RETURN expression . ';'

    ';'  shift, and go to state 167


State 116

   28 unary_expression: SIZEOF '(' . IDENTIFIER ')'
   29                 | SIZEOF '(' . type_name ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER

    CHAR        shift, and go to state 4
    FLOAT       shift, and go to state 5
    INT         shift, and go to state 6
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 168
    VAR         shift, and go to state 33

    type_name  go to state 169


State 117

   24 unary_expression: INC_OP unary_expression .

    $default  reduce using rule 24 (unary_expression)


State 118

   25 unary_expression: DEC_OP unary_expression .

    $default  reduce using rule 25 (unary_expression)


State 119

   17 $@2: . %empty
   18 postfix_expression: IDENTIFIER '(' . $@2 functionCall

    $default  reduce using rule 17 ($@2)

    $@2  go to state 170


State 120

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
  110 print_statement: PRINT '(' . print_args ')'
  111                | PRINT '(' . ')'
  114 print_args: . expression ',' $@15 print_args
  115           | . expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    ')'         shift, and go to state 171
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 172
    print_args                 go to state 173


State 121

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
  112 print_statement: PRINTS '(' . print_args ')'
  114 print_args: . expression ',' $@15 print_args
  115           | . expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 172
    print_args                 go to state 174


State 122

   27 unary_expression: LEN '(' . IDENTIFIER ')'

    IDENTIFIER  shift, and go to state 175


State 123

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   30                 | MALLOC '(' . expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 176


State 124

    3 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 177


State 125

   12 postfix_expression: postfix_expression INC_OP .

    $default  reduce using rule 12 (postfix_expression)


State 126

   13 postfix_expression: postfix_expression DEC_OP .

    $default  reduce using rule 13 (postfix_expression)


State 127

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   11                   | postfix_expression '[' . expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 178


State 128

   14 postfix_expression: postfix_expression '.' . IDENTIFIER
   16                   | postfix_expression '.' . IDENTIFIER '(' $@1 functionCall

    IDENTIFIER  shift, and go to state 179


State 129

   66 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 66 (assignment_operator)


State 130

   67 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 67 (assignment_operator)


State 131

   63 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 63 (assignment_operator)


State 132

   64 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 64 (assignment_operator)


State 133

   65 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 65 (assignment_operator)


State 134

   68 assignment_operator: POW_ASSIGN .

    $default  reduce using rule 68 (assignment_operator)


State 135

   62 assignment_operator: '=' .  [SIZEOF, INC_OP, DEC_OP, C_CONST, S_CONST, B_CONST, I_CONST, F_CONST, IDENTIFIER, LEN, NULL_, MALLOC, '(', '+', '-', '!', '*', '&']
  109 scan_statement: unary_expression '=' . SCAN '(' ')'

    SCAN  shift, and go to state 180

    $default  reduce using rule 62 (assignment_operator)


State 136

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   69 assignment_expression: unary_expression assignment_operator . expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 181


State 137

   70 declaration_expression: type_name declarationlist .

    $default  reduce using rule 70 (declaration_expression)


State 138

   71 declarationlist: declaration . ',' declarationlist
   72                | declaration .  [';']

    ','  shift, and go to state 182

    $default  reduce using rule 72 (declarationlist)


State 139

   73 declaration: stars . IDENTIFIER
   74            | stars . IDENTIFIER '=' expression
   76            | stars . IDENTIFIER $@3 brackets

    IDENTIFIER  shift, and go to state 183


State 140

   26 unary_expression: unary_operator unary_expression .

    $default  reduce using rule 26 (unary_expression)


State 141

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   43 multiplicative_expression: multiplicative_expression '*' . unary_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression  go to state 83
    constant            go to state 84
    postfix_expression  go to state 85
    unary_expression    go to state 184
    unary_operator      go to state 88


State 142

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   44 multiplicative_expression: multiplicative_expression '/' . unary_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression  go to state 83
    constant            go to state 84
    postfix_expression  go to state 85
    unary_expression    go to state 185
    unary_operator      go to state 88


State 143

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   45 multiplicative_expression: multiplicative_expression '%' . unary_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression  go to state 83
    constant            go to state 84
    postfix_expression  go to state 85
    unary_expression    go to state 186
    unary_operator      go to state 88


State 144

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   47 additive_expression: additive_expression '+' . multiplicative_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 187


State 145

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   48 additive_expression: additive_expression '-' . multiplicative_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 188


State 146

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   52 relational_expression: relational_expression LE_OP . additive_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 189


State 147

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   53 relational_expression: relational_expression GE_OP . additive_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 190


State 148

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   50 relational_expression: relational_expression '<' . additive_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 191


State 149

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   51 relational_expression: relational_expression '>' . additive_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 192


State 150

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   55 equality_expression: equality_expression EQ_OP . relational_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 193


State 151

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   56 equality_expression: equality_expression NE_OP . relational_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 194


State 152

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   58 logical_and_expression: logical_and_expression AND_OP . equality_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 195


State 153

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   60 logical_or_expression: logical_or_expression OR_OP . logical_and_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 196


State 154

  100 statement: expression ';' .

    $default  reduce using rule 100 (statement)


State 155

   96 statement: assignment_expression ';' .

    $default  reduce using rule 96 (statement)


State 156

   97 statement: declaration_expression ';' .

    $default  reduce using rule 97 (statement)


State 157

  131 statement_list: statement statement_list .

    $default  reduce using rule 131 (statement_list)


State 158

  102 statement: flow_control_statements ';' .

    $default  reduce using rule 102 (statement)


State 159

  101 statement: IO_statement ';' .

    $default  reduce using rule 101 (statement)


State 160

  160 statement_block: '{' $@28 statement_list '}' .

    $default  reduce using rule 160 (statement_block)


State 161

  145 dimensions: '[' . ']' dimensions

    ']'  shift, and go to state 197


State 162

  157 functionArguements: type_name stars IDENTIFIER dimensions .

    $default  reduce using rule 157 (functionArguements)


State 163

  154 functionSuffix: functionArguements ')' $@26 statement_block .

    $default  reduce using rule 154 (functionSuffix)


State 164

  158 functionArguements: functionArguements ',' type_name stars . IDENTIFIER dimensions

    IDENTIFIER  shift, and go to state 198


State 165

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   69 assignment_expression: . unary_expression assignment_operator expression
   70 declaration_expression: . type_name declarationlist
  121 for_expression: FOR '(' $@16 . loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  122 loop_initialization_list: . assignment_expression ',' loop_initialization_list
  123                         | . assignment_expression
  124                         | . declaration_expression
  125                         | . %empty  [';']

    CHAR        shift, and go to state 4
    FLOAT       shift, and go to state 5
    INT         shift, and go to state 6
    SIZEOF      shift, and go to state 63
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    VAR         shift, and go to state 33
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    $default  reduce using rule 125 (loop_initialization_list)

    primary_expression        go to state 83
    constant                  go to state 84
    postfix_expression        go to state 85
    unary_expression          go to state 199
    type_name                 go to state 87
    unary_operator            go to state 88
    assignment_expression     go to state 200
    declaration_expression    go to state 201
    loop_initialization_list  go to state 202


State 166

   86 conditional_expression: IF '(' expression . ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement

    ')'  shift, and go to state 203


State 167

  103 statement: RETURN expression ';' .

    $default  reduce using rule 103 (statement)


State 168

   28 unary_expression: SIZEOF '(' IDENTIFIER . ')'

    ')'  shift, and go to state 204


State 169

   29 unary_expression: SIZEOF '(' type_name . ')'

    ')'  shift, and go to state 205


State 170

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   18                   | IDENTIFIER '(' $@2 . functionCall
   19 functionCall: . ')'
   20             | . argument_list ')'
   21 argument_list: . expression
   22              | . argument_list ',' expression
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    ')'         shift, and go to state 206
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    functionCall               go to state 207
    argument_list              go to state 208
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 209


State 171

  111 print_statement: PRINT '(' ')' .

    $default  reduce using rule 111 (print_statement)


State 172

  114 print_args: expression . ',' $@15 print_args
  115           | expression .  [')']

    ','  shift, and go to state 210

    $default  reduce using rule 115 (print_args)


State 173

  110 print_statement: PRINT '(' print_args . ')'

    ')'  shift, and go to state 211


State 174

  112 print_statement: PRINTS '(' print_args . ')'

    ')'  shift, and go to state 212


State 175

   27 unary_expression: LEN '(' IDENTIFIER . ')'

    ')'  shift, and go to state 213


State 176

   30 unary_expression: MALLOC '(' expression . ')'

    ')'  shift, and go to state 214


State 177

    3 primary_expression: '(' expression ')' .

    $default  reduce using rule 3 (primary_expression)


State 178

   11 postfix_expression: postfix_expression '[' expression . ']'

    ']'  shift, and go to state 215


State 179

   14 postfix_expression: postfix_expression '.' IDENTIFIER .  [ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, POW_ASSIGN, INC_OP, DEC_OP, OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', '[', ']', '.', ',', '+', '-', '*', '/', '%', '<', '>', '=', ';']
   16                   | postfix_expression '.' IDENTIFIER . '(' $@1 functionCall

    '('  shift, and go to state 216

    $default  reduce using rule 14 (postfix_expression)


State 180

  109 scan_statement: unary_expression '=' SCAN . '(' ')'

    '('  shift, and go to state 217


State 181

   69 assignment_expression: unary_expression assignment_operator expression .

    $default  reduce using rule 69 (assignment_expression)


State 182

   71 declarationlist: . declaration ',' declarationlist
   71                | declaration ',' . declarationlist
   72                | . declaration
   73 declaration: . stars IDENTIFIER
   74            | . stars IDENTIFIER '=' expression
   76            | . stars IDENTIFIER $@3 brackets
   77 stars: . '*' stars
   78      | . %empty  [IDENTIFIER]

    '*'  shift, and go to state 17

    $default  reduce using rule 78 (stars)

    declarationlist  go to state 218
    declaration      go to state 138
    stars            go to state 139


State 183

   73 declaration: stars IDENTIFIER .  [',', ';']
   74            | stars IDENTIFIER . '=' expression
   75 $@3: . %empty  ['[']
   76 declaration: stars IDENTIFIER . $@3 brackets

    '='  shift, and go to state 219

    '['       reduce using rule 75 ($@3)
    $default  reduce using rule 73 (declaration)

    $@3  go to state 220


State 184

   43 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $default  reduce using rule 43 (multiplicative_expression)


State 185

   44 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $default  reduce using rule 44 (multiplicative_expression)


State 186

   45 multiplicative_expression: multiplicative_expression '%' unary_expression .

    $default  reduce using rule 45 (multiplicative_expression)


State 187

   43 multiplicative_expression: multiplicative_expression . '*' unary_expression
   44                          | multiplicative_expression . '/' unary_expression
   45                          | multiplicative_expression . '%' unary_expression
   47 additive_expression: additive_expression '+' multiplicative_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '+', '-', '<', '>', ';']

    '*'  shift, and go to state 141
    '/'  shift, and go to state 142
    '%'  shift, and go to state 143

    $default  reduce using rule 47 (additive_expression)


State 188

   43 multiplicative_expression: multiplicative_expression . '*' unary_expression
   44                          | multiplicative_expression . '/' unary_expression
   45                          | multiplicative_expression . '%' unary_expression
   48 additive_expression: additive_expression '-' multiplicative_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '+', '-', '<', '>', ';']

    '*'  shift, and go to state 141
    '/'  shift, and go to state 142
    '%'  shift, and go to state 143

    $default  reduce using rule 48 (additive_expression)


State 189

   47 additive_expression: additive_expression . '+' multiplicative_expression
   48                    | additive_expression . '-' multiplicative_expression
   52 relational_expression: relational_expression LE_OP additive_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '<', '>', ';']

    '+'  shift, and go to state 144
    '-'  shift, and go to state 145

    $default  reduce using rule 52 (relational_expression)


State 190

   47 additive_expression: additive_expression . '+' multiplicative_expression
   48                    | additive_expression . '-' multiplicative_expression
   53 relational_expression: relational_expression GE_OP additive_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '<', '>', ';']

    '+'  shift, and go to state 144
    '-'  shift, and go to state 145

    $default  reduce using rule 53 (relational_expression)


State 191

   47 additive_expression: additive_expression . '+' multiplicative_expression
   48                    | additive_expression . '-' multiplicative_expression
   50 relational_expression: relational_expression '<' additive_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '<', '>', ';']

    '+'  shift, and go to state 144
    '-'  shift, and go to state 145

    $default  reduce using rule 50 (relational_expression)


State 192

   47 additive_expression: additive_expression . '+' multiplicative_expression
   48                    | additive_expression . '-' multiplicative_expression
   51 relational_expression: relational_expression '>' additive_expression .  [OR_OP, AND_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ')', ']', ',', '<', '>', ';']

    '+'  shift, and go to state 144
    '-'  shift, and go to state 145

    $default  reduce using rule 51 (relational_expression)


State 193

   50 relational_expression: relational_expression . '<' additive_expression
   51                      | relational_expression . '>' additive_expression
   52                      | relational_expression . LE_OP additive_expression
   53                      | relational_expression . GE_OP additive_expression
   55 equality_expression: equality_expression EQ_OP relational_expression .  [OR_OP, AND_OP, EQ_OP, NE_OP, ')', ']', ',', ';']

    LE_OP  shift, and go to state 146
    GE_OP  shift, and go to state 147
    '<'    shift, and go to state 148
    '>'    shift, and go to state 149

    $default  reduce using rule 55 (equality_expression)


State 194

   50 relational_expression: relational_expression . '<' additive_expression
   51                      | relational_expression . '>' additive_expression
   52                      | relational_expression . LE_OP additive_expression
   53                      | relational_expression . GE_OP additive_expression
   56 equality_expression: equality_expression NE_OP relational_expression .  [OR_OP, AND_OP, EQ_OP, NE_OP, ')', ']', ',', ';']

    LE_OP  shift, and go to state 146
    GE_OP  shift, and go to state 147
    '<'    shift, and go to state 148
    '>'    shift, and go to state 149

    $default  reduce using rule 56 (equality_expression)


State 195

   55 equality_expression: equality_expression . EQ_OP relational_expression
   56                    | equality_expression . NE_OP relational_expression
   58 logical_and_expression: logical_and_expression AND_OP equality_expression .  [OR_OP, AND_OP, ')', ']', ',', ';']

    EQ_OP  shift, and go to state 150
    NE_OP  shift, and go to state 151

    $default  reduce using rule 58 (logical_and_expression)


State 196

   58 logical_and_expression: logical_and_expression . AND_OP equality_expression
   60 logical_or_expression: logical_or_expression OR_OP logical_and_expression .  [OR_OP, ')', ']', ',', ';']

    AND_OP  shift, and go to state 152

    $default  reduce using rule 60 (logical_or_expression)


State 197

  145 dimensions: . '[' ']' dimensions
  145           | '[' ']' . dimensions
  146           | . %empty  [')', ',']

    '['  shift, and go to state 161

    $default  reduce using rule 146 (dimensions)

    dimensions  go to state 221


State 198

  145 dimensions: . '[' ']' dimensions
  146           | . %empty  [')', ',']
  158 functionArguements: functionArguements ',' type_name stars IDENTIFIER . dimensions

    '['  shift, and go to state 161

    $default  reduce using rule 146 (dimensions)

    dimensions  go to state 222


State 199

   62 assignment_operator: . '='
   63                    | . MUL_ASSIGN
   64                    | . DIV_ASSIGN
   65                    | . MOD_ASSIGN
   66                    | . ADD_ASSIGN
   67                    | . SUB_ASSIGN
   68                    | . POW_ASSIGN
   69 assignment_expression: unary_expression . assignment_operator expression

    ADD_ASSIGN  shift, and go to state 129
    SUB_ASSIGN  shift, and go to state 130
    MUL_ASSIGN  shift, and go to state 131
    DIV_ASSIGN  shift, and go to state 132
    MOD_ASSIGN  shift, and go to state 133
    POW_ASSIGN  shift, and go to state 134
    '='         shift, and go to state 223

    assignment_operator  go to state 136


State 200

  122 loop_initialization_list: assignment_expression . ',' loop_initialization_list
  123                         | assignment_expression .  [';']

    ','  shift, and go to state 224

    $default  reduce using rule 123 (loop_initialization_list)


State 201

  124 loop_initialization_list: declaration_expression .

    $default  reduce using rule 124 (loop_initialization_list)


State 202

  121 for_expression: FOR '(' $@16 loop_initialization_list . ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'

    ';'  shift, and go to state 225


State 203

   82 @5: . %empty
   86 conditional_expression: IF '(' expression ')' . @5 '{' $@6 statement_list $@7 '}' $@8 else_statement

    $default  reduce using rule 82 (@5)

    @5  go to state 226


State 204

   28 unary_expression: SIZEOF '(' IDENTIFIER ')' .

    $default  reduce using rule 28 (unary_expression)


State 205

   29 unary_expression: SIZEOF '(' type_name ')' .

    $default  reduce using rule 29 (unary_expression)


State 206

   19 functionCall: ')' .

    $default  reduce using rule 19 (functionCall)


State 207

   18 postfix_expression: IDENTIFIER '(' $@2 functionCall .

    $default  reduce using rule 18 (postfix_expression)


State 208

   20 functionCall: argument_list . ')'
   22 argument_list: argument_list . ',' expression

    ')'  shift, and go to state 227
    ','  shift, and go to state 228


State 209

   21 argument_list: expression .

    $default  reduce using rule 21 (argument_list)


State 210

  113 $@15: . %empty
  114 print_args: expression ',' . $@15 print_args

    $default  reduce using rule 113 ($@15)

    $@15  go to state 229


State 211

  110 print_statement: PRINT '(' print_args ')' .

    $default  reduce using rule 110 (print_statement)


State 212

  112 print_statement: PRINTS '(' print_args ')' .

    $default  reduce using rule 112 (print_statement)


State 213

   27 unary_expression: LEN '(' IDENTIFIER ')' .

    $default  reduce using rule 27 (unary_expression)


State 214

   30 unary_expression: MALLOC '(' expression ')' .

    $default  reduce using rule 30 (unary_expression)


State 215

   11 postfix_expression: postfix_expression '[' expression ']' .

    $default  reduce using rule 11 (postfix_expression)


State 216

   15 $@1: . %empty
   16 postfix_expression: postfix_expression '.' IDENTIFIER '(' . $@1 functionCall

    $default  reduce using rule 15 ($@1)

    $@1  go to state 230


State 217

  109 scan_statement: unary_expression '=' SCAN '(' . ')'

    ')'  shift, and go to state 231


State 218

   71 declarationlist: declaration ',' declarationlist .

    $default  reduce using rule 71 (declarationlist)


State 219

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   74 declaration: stars IDENTIFIER '=' . expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 232


State 220

   76 declaration: stars IDENTIFIER $@3 . brackets
   80 brackets: . '[' expression ']' $@4 brackets
   81         | . '[' expression ']'

    '['  shift, and go to state 233

    brackets  go to state 234


State 221

  145 dimensions: '[' ']' dimensions .

    $default  reduce using rule 145 (dimensions)


State 222

  158 functionArguements: functionArguements ',' type_name stars IDENTIFIER dimensions .

    $default  reduce using rule 158 (functionArguements)


State 223

   62 assignment_operator: '=' .

    $default  reduce using rule 62 (assignment_operator)


State 224

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   69 assignment_expression: . unary_expression assignment_operator expression
   70 declaration_expression: . type_name declarationlist
  122 loop_initialization_list: . assignment_expression ',' loop_initialization_list
  122                         | assignment_expression ',' . loop_initialization_list
  123                         | . assignment_expression
  124                         | . declaration_expression
  125                         | . %empty  [';']

    CHAR        shift, and go to state 4
    FLOAT       shift, and go to state 5
    INT         shift, and go to state 6
    SIZEOF      shift, and go to state 63
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    VAR         shift, and go to state 33
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    $default  reduce using rule 125 (loop_initialization_list)

    primary_expression        go to state 83
    constant                  go to state 84
    postfix_expression        go to state 85
    unary_expression          go to state 199
    type_name                 go to state 87
    unary_operator            go to state 88
    assignment_expression     go to state 200
    declaration_expression    go to state 201
    loop_initialization_list  go to state 235


State 225

  117 @17: . %empty
  121 for_expression: FOR '(' $@16 loop_initialization_list ';' . @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'

    $default  reduce using rule 117 (@17)

    @17  go to state 236


State 226

   86 conditional_expression: IF '(' expression ')' @5 . '{' $@6 statement_list $@7 '}' $@8 else_statement

    '{'  shift, and go to state 237


State 227

   20 functionCall: argument_list ')' .

    $default  reduce using rule 20 (functionCall)


State 228

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   22 argument_list: argument_list ',' . expression
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 238


State 229

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
  114 print_args: . expression ',' $@15 print_args
  114           | expression ',' $@15 . print_args
  115           | . expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 172
    print_args                 go to state 239


State 230

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   16                   | postfix_expression '.' IDENTIFIER '(' $@1 . functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   19 functionCall: . ')'
   20             | . argument_list ')'
   21 argument_list: . expression
   22              | . argument_list ',' expression
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    ')'         shift, and go to state 206
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    functionCall               go to state 240
    argument_list              go to state 208
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 209


State 231

  109 scan_statement: unary_expression '=' SCAN '(' ')' .

    $default  reduce using rule 109 (scan_statement)


State 232

   74 declaration: stars IDENTIFIER '=' expression .

    $default  reduce using rule 74 (declaration)


State 233

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   80 brackets: '[' . expression ']' $@4 brackets
   81         | '[' . expression ']'

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 241


State 234

   76 declaration: stars IDENTIFIER $@3 brackets .

    $default  reduce using rule 76 (declaration)


State 235

  122 loop_initialization_list: assignment_expression ',' loop_initialization_list .

    $default  reduce using rule 122 (loop_initialization_list)


State 236

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 . loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  126 loop_condition: . expression
  127               | . %empty  [';']

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    $default  reduce using rule 127 (loop_condition)

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 242
    loop_condition             go to state 243


State 237

   83 $@6: . %empty
   86 conditional_expression: IF '(' expression ')' @5 '{' . $@6 statement_list $@7 '}' $@8 else_statement

    $default  reduce using rule 83 ($@6)

    $@6  go to state 244


State 238

   22 argument_list: argument_list ',' expression .

    $default  reduce using rule 22 (argument_list)


State 239

  114 print_args: expression ',' $@15 print_args .

    $default  reduce using rule 114 (print_args)


State 240

   16 postfix_expression: postfix_expression '.' IDENTIFIER '(' $@1 functionCall .

    $default  reduce using rule 16 (postfix_expression)


State 241

   80 brackets: '[' expression . ']' $@4 brackets
   81         | '[' expression . ']'

    ']'  shift, and go to state 245


State 242

  126 loop_condition: expression .

    $default  reduce using rule 126 (loop_condition)


State 243

  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition . ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'

    ';'  shift, and go to state 246


State 244

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   69 assignment_expression: . unary_expression assignment_operator expression
   70 declaration_expression: . type_name declarationlist
   86 conditional_expression: . IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement
   86                       | IF '(' expression ')' @5 '{' $@6 . statement_list $@7 '}' $@8 else_statement
   96 statement: . assignment_expression ';'
   97          | . declaration_expression ';'
   98          | . conditional_expression
   99          | . for_expression
  100          | . expression ';'
  101          | . IO_statement ';'
  102          | . flow_control_statements ';'
  103          | . RETURN expression ';'
  104          | . RETURN ';'
  105 flow_control_statements: . BREAK
  106                        | . CONTINUE
  107 IO_statement: . print_statement
  108             | . scan_statement
  109 scan_statement: . unary_expression '=' SCAN '(' ')'
  110 print_statement: . PRINT '(' print_args ')'
  111                | . PRINT '(' ')'
  112                | . PRINTS '(' print_args ')'
  121 for_expression: . FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  131 statement_list: . statement statement_list
  132               | . statement

    BREAK       shift, and go to state 58
    CHAR        shift, and go to state 4
    CONTINUE    shift, and go to state 59
    FLOAT       shift, and go to state 5
    FOR         shift, and go to state 60
    IF          shift, and go to state 61
    INT         shift, and go to state 6
    RETURN      shift, and go to state 62
    SIZEOF      shift, and go to state 63
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    PRINT       shift, and go to state 72
    PRINTS      shift, and go to state 73
    LEN         shift, and go to state 74
    VAR         shift, and go to state 33
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 86
    type_name                  go to state 87
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 95
    assignment_expression      go to state 96
    declaration_expression     go to state 97
    conditional_expression     go to state 98
    statement                  go to state 99
    flow_control_statements    go to state 100
    IO_statement               go to state 101
    scan_statement             go to state 102
    print_statement            go to state 103
    for_expression             go to state 104
    statement_list             go to state 247


State 245

   79 $@4: . %empty  ['[']
   80 brackets: '[' expression ']' . $@4 brackets
   81         | '[' expression ']' .  [',', ';']

    '['       reduce using rule 79 ($@4)
    $default  reduce using rule 81 (brackets)

    $@4  go to state 248


State 246

  118 $@18: . %empty
  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' . $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'

    $default  reduce using rule 118 ($@18)

    $@18  go to state 249


State 247

   84 $@7: . %empty
   86 conditional_expression: IF '(' expression ')' @5 '{' $@6 statement_list . $@7 '}' $@8 else_statement

    $default  reduce using rule 84 ($@7)

    $@7  go to state 250


State 248

   80 brackets: . '[' expression ']' $@4 brackets
   80         | '[' expression ']' $@4 . brackets
   81         | . '[' expression ']'

    '['  shift, and go to state 233

    brackets  go to state 251


State 249

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 . loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  128 loop_increment_list: . expression ',' loop_increment_list
  129                    | . expression
  130                    | . %empty  [')']

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    $default  reduce using rule 130 (loop_increment_list)

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 252
    loop_increment_list        go to state 253


State 250

   86 conditional_expression: IF '(' expression ')' @5 '{' $@6 statement_list $@7 . '}' $@8 else_statement

    '}'  shift, and go to state 254


State 251

   80 brackets: '[' expression ']' $@4 brackets .

    $default  reduce using rule 80 (brackets)


State 252

  128 loop_increment_list: expression . ',' loop_increment_list
  129                    | expression .  [')']

    ','  shift, and go to state 255

    $default  reduce using rule 129 (loop_increment_list)


State 253

  119 $@19: . %empty
  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list . $@19 ')' '{' statement_list $@20 '}'

    $default  reduce using rule 119 ($@19)

    $@19  go to state 256


State 254

   85 $@8: . %empty
   86 conditional_expression: IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' . $@8 else_statement

    $default  reduce using rule 85 ($@8)

    $@8  go to state 257


State 255

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
  128 loop_increment_list: . expression ',' loop_increment_list
  128                    | expression ',' . loop_increment_list
  129                    | . expression
  130                    | . %empty  [')']

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    $default  reduce using rule 130 (loop_increment_list)

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 252
    loop_increment_list        go to state 258


State 256

  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 . ')' '{' statement_list $@20 '}'

    ')'  shift, and go to state 259


State 257

   86 conditional_expression: IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 . else_statement
   91 else_statement: . ELIF '(' expression ')' @9 '{' $@10 statement_list $@11 '}' $@12 else_statement
   94               | . ELSE '{' $@13 statement_list $@14 '}'
   95               | . %empty  [BREAK, CHAR, CONTINUE, FLOAT, FOR, IF, INT, RETURN, SIZEOF, BOOL, STRING, INC_OP, DEC_OP, C_CONST, S_CONST, B_CONST, I_CONST, F_CONST, IDENTIFIER, PRINT, PRINTS, LEN, VAR, NULL_, MALLOC, '(', '+', '-', '!', '*', '&', '}']

    ELSE  shift, and go to state 260
    ELIF  shift, and go to state 261

    $default  reduce using rule 95 (else_statement)

    else_statement  go to state 262


State 258

  128 loop_increment_list: expression ',' loop_increment_list .

    $default  reduce using rule 128 (loop_increment_list)


State 259

  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' . '{' statement_list $@20 '}'

    '{'  shift, and go to state 263


State 260

   94 else_statement: ELSE . '{' $@13 statement_list $@14 '}'

    '{'  shift, and go to state 264


State 261

   91 else_statement: ELIF . '(' expression ')' @9 '{' $@10 statement_list $@11 '}' $@12 else_statement

    '('  shift, and go to state 265


State 262

   86 conditional_expression: IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement .

    $default  reduce using rule 86 (conditional_expression)


State 263

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   69 assignment_expression: . unary_expression assignment_operator expression
   70 declaration_expression: . type_name declarationlist
   86 conditional_expression: . IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement
   96 statement: . assignment_expression ';'
   97          | . declaration_expression ';'
   98          | . conditional_expression
   99          | . for_expression
  100          | . expression ';'
  101          | . IO_statement ';'
  102          | . flow_control_statements ';'
  103          | . RETURN expression ';'
  104          | . RETURN ';'
  105 flow_control_statements: . BREAK
  106                        | . CONTINUE
  107 IO_statement: . print_statement
  108             | . scan_statement
  109 scan_statement: . unary_expression '=' SCAN '(' ')'
  110 print_statement: . PRINT '(' print_args ')'
  111                | . PRINT '(' ')'
  112                | . PRINTS '(' print_args ')'
  121 for_expression: . FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  121               | FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' . statement_list $@20 '}'
  131 statement_list: . statement statement_list
  132               | . statement

    BREAK       shift, and go to state 58
    CHAR        shift, and go to state 4
    CONTINUE    shift, and go to state 59
    FLOAT       shift, and go to state 5
    FOR         shift, and go to state 60
    IF          shift, and go to state 61
    INT         shift, and go to state 6
    RETURN      shift, and go to state 62
    SIZEOF      shift, and go to state 63
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    PRINT       shift, and go to state 72
    PRINTS      shift, and go to state 73
    LEN         shift, and go to state 74
    VAR         shift, and go to state 33
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 86
    type_name                  go to state 87
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 95
    assignment_expression      go to state 96
    declaration_expression     go to state 97
    conditional_expression     go to state 98
    statement                  go to state 99
    flow_control_statements    go to state 100
    IO_statement               go to state 101
    scan_statement             go to state 102
    print_statement            go to state 103
    for_expression             go to state 104
    statement_list             go to state 266


State 264

   92 $@13: . %empty
   94 else_statement: ELSE '{' . $@13 statement_list $@14 '}'

    $default  reduce using rule 92 ($@13)

    $@13  go to state 267


State 265

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   91 else_statement: ELIF '(' . expression ')' @9 '{' $@10 statement_list $@11 '}' $@12 else_statement

    SIZEOF      shift, and go to state 63
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    LEN         shift, and go to state 74
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 114
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 268


State 266

  120 $@20: . %empty
  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list . $@20 '}'

    $default  reduce using rule 120 ($@20)

    $@20  go to state 269


State 267

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   69 assignment_expression: . unary_expression assignment_operator expression
   70 declaration_expression: . type_name declarationlist
   86 conditional_expression: . IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement
   94 else_statement: ELSE '{' $@13 . statement_list $@14 '}'
   96 statement: . assignment_expression ';'
   97          | . declaration_expression ';'
   98          | . conditional_expression
   99          | . for_expression
  100          | . expression ';'
  101          | . IO_statement ';'
  102          | . flow_control_statements ';'
  103          | . RETURN expression ';'
  104          | . RETURN ';'
  105 flow_control_statements: . BREAK
  106                        | . CONTINUE
  107 IO_statement: . print_statement
  108             | . scan_statement
  109 scan_statement: . unary_expression '=' SCAN '(' ')'
  110 print_statement: . PRINT '(' print_args ')'
  111                | . PRINT '(' ')'
  112                | . PRINTS '(' print_args ')'
  121 for_expression: . FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  131 statement_list: . statement statement_list
  132               | . statement

    BREAK       shift, and go to state 58
    CHAR        shift, and go to state 4
    CONTINUE    shift, and go to state 59
    FLOAT       shift, and go to state 5
    FOR         shift, and go to state 60
    IF          shift, and go to state 61
    INT         shift, and go to state 6
    RETURN      shift, and go to state 62
    SIZEOF      shift, and go to state 63
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    PRINT       shift, and go to state 72
    PRINTS      shift, and go to state 73
    LEN         shift, and go to state 74
    VAR         shift, and go to state 33
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 86
    type_name                  go to state 87
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 95
    assignment_expression      go to state 96
    declaration_expression     go to state 97
    conditional_expression     go to state 98
    statement                  go to state 99
    flow_control_statements    go to state 100
    IO_statement               go to state 101
    scan_statement             go to state 102
    print_statement            go to state 103
    for_expression             go to state 104
    statement_list             go to state 270


State 268

   91 else_statement: ELIF '(' expression . ')' @9 '{' $@10 statement_list $@11 '}' $@12 else_statement

    ')'  shift, and go to state 271


State 269

  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 . '}'

    '}'  shift, and go to state 272


State 270

   93 $@14: . %empty
   94 else_statement: ELSE '{' $@13 statement_list . $@14 '}'

    $default  reduce using rule 93 ($@14)

    $@14  go to state 273


State 271

   87 @9: . %empty
   91 else_statement: ELIF '(' expression ')' . @9 '{' $@10 statement_list $@11 '}' $@12 else_statement

    $default  reduce using rule 87 (@9)

    @9  go to state 274


State 272

  121 for_expression: FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}' .

    $default  reduce using rule 121 (for_expression)


State 273

   94 else_statement: ELSE '{' $@13 statement_list $@14 . '}'

    '}'  shift, and go to state 275


State 274

   91 else_statement: ELIF '(' expression ')' @9 . '{' $@10 statement_list $@11 '}' $@12 else_statement

    '{'  shift, and go to state 276


State 275

   94 else_statement: ELSE '{' $@13 statement_list $@14 '}' .

    $default  reduce using rule 94 (else_statement)


State 276

   88 $@10: . %empty
   91 else_statement: ELIF '(' expression ')' @9 '{' . $@10 statement_list $@11 '}' $@12 else_statement

    $default  reduce using rule 88 ($@10)

    $@10  go to state 277


State 277

    1 primary_expression: . IDENTIFIER
    2                   | . constant
    3                   | . '(' expression ')'
    4                   | . NULL_
    5 constant: . I_CONST
    6         | . F_CONST
    7         | . C_CONST
    8         | . S_CONST
    9         | . B_CONST
   10 postfix_expression: . primary_expression
   11                   | . postfix_expression '[' expression ']'
   12                   | . postfix_expression INC_OP
   13                   | . postfix_expression DEC_OP
   14                   | . postfix_expression '.' IDENTIFIER
   16                   | . postfix_expression '.' IDENTIFIER '(' $@1 functionCall
   18                   | . IDENTIFIER '(' $@2 functionCall
   23 unary_expression: . postfix_expression
   24                 | . INC_OP unary_expression
   25                 | . DEC_OP unary_expression
   26                 | . unary_operator unary_expression
   27                 | . LEN '(' IDENTIFIER ')'
   28                 | . SIZEOF '(' IDENTIFIER ')'
   29                 | . SIZEOF '(' type_name ')'
   30                 | . MALLOC '(' expression ')'
   31 type_name: . INT
   32          | . FLOAT
   33          | . CHAR
   34          | . STRING
   35          | . BOOL
   36          | . VAR IDENTIFIER
   37 unary_operator: . '+'
   38               | . '-'
   39               | . '!'
   40               | . '*'
   41               | . '&'
   42 multiplicative_expression: . unary_expression
   43                          | . multiplicative_expression '*' unary_expression
   44                          | . multiplicative_expression '/' unary_expression
   45                          | . multiplicative_expression '%' unary_expression
   46 additive_expression: . multiplicative_expression
   47                    | . additive_expression '+' multiplicative_expression
   48                    | . additive_expression '-' multiplicative_expression
   49 relational_expression: . additive_expression
   50                      | . relational_expression '<' additive_expression
   51                      | . relational_expression '>' additive_expression
   52                      | . relational_expression LE_OP additive_expression
   53                      | . relational_expression GE_OP additive_expression
   54 equality_expression: . relational_expression
   55                    | . equality_expression EQ_OP relational_expression
   56                    | . equality_expression NE_OP relational_expression
   57 logical_and_expression: . equality_expression
   58                       | . logical_and_expression AND_OP equality_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 expression: . logical_or_expression
   69 assignment_expression: . unary_expression assignment_operator expression
   70 declaration_expression: . type_name declarationlist
   86 conditional_expression: . IF '(' expression ')' @5 '{' $@6 statement_list $@7 '}' $@8 else_statement
   91 else_statement: ELIF '(' expression ')' @9 '{' $@10 . statement_list $@11 '}' $@12 else_statement
   96 statement: . assignment_expression ';'
   97          | . declaration_expression ';'
   98          | . conditional_expression
   99          | . for_expression
  100          | . expression ';'
  101          | . IO_statement ';'
  102          | . flow_control_statements ';'
  103          | . RETURN expression ';'
  104          | . RETURN ';'
  105 flow_control_statements: . BREAK
  106                        | . CONTINUE
  107 IO_statement: . print_statement
  108             | . scan_statement
  109 scan_statement: . unary_expression '=' SCAN '(' ')'
  110 print_statement: . PRINT '(' print_args ')'
  111                | . PRINT '(' ')'
  112                | . PRINTS '(' print_args ')'
  121 for_expression: . FOR '(' $@16 loop_initialization_list ';' @17 loop_condition ';' $@18 loop_increment_list $@19 ')' '{' statement_list $@20 '}'
  131 statement_list: . statement statement_list
  132               | . statement

    BREAK       shift, and go to state 58
    CHAR        shift, and go to state 4
    CONTINUE    shift, and go to state 59
    FLOAT       shift, and go to state 5
    FOR         shift, and go to state 60
    IF          shift, and go to state 61
    INT         shift, and go to state 6
    RETURN      shift, and go to state 62
    SIZEOF      shift, and go to state 63
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    INC_OP      shift, and go to state 64
    DEC_OP      shift, and go to state 65
    C_CONST     shift, and go to state 66
    S_CONST     shift, and go to state 67
    B_CONST     shift, and go to state 68
    I_CONST     shift, and go to state 69
    F_CONST     shift, and go to state 70
    IDENTIFIER  shift, and go to state 71
    PRINT       shift, and go to state 72
    PRINTS      shift, and go to state 73
    LEN         shift, and go to state 74
    VAR         shift, and go to state 33
    NULL_       shift, and go to state 75
    MALLOC      shift, and go to state 76
    '('         shift, and go to state 77
    '+'         shift, and go to state 78
    '-'         shift, and go to state 79
    '!'         shift, and go to state 80
    '*'         shift, and go to state 81
    '&'         shift, and go to state 82

    primary_expression         go to state 83
    constant                   go to state 84
    postfix_expression         go to state 85
    unary_expression           go to state 86
    type_name                  go to state 87
    unary_operator             go to state 88
    multiplicative_expression  go to state 89
    additive_expression        go to state 90
    relational_expression      go to state 91
    equality_expression        go to state 92
    logical_and_expression     go to state 93
    logical_or_expression      go to state 94
    expression                 go to state 95
    assignment_expression      go to state 96
    declaration_expression     go to state 97
    conditional_expression     go to state 98
    statement                  go to state 99
    flow_control_statements    go to state 100
    IO_statement               go to state 101
    scan_statement             go to state 102
    print_statement            go to state 103
    for_expression             go to state 104
    statement_list             go to state 278


State 278

   89 $@11: . %empty
   91 else_statement: ELIF '(' expression ')' @9 '{' $@10 statement_list . $@11 '}' $@12 else_statement

    $default  reduce using rule 89 ($@11)

    $@11  go to state 279


State 279

   91 else_statement: ELIF '(' expression ')' @9 '{' $@10 statement_list $@11 . '}' $@12 else_statement

    '}'  shift, and go to state 280


State 280

   90 $@12: . %empty
   91 else_statement: ELIF '(' expression ')' @9 '{' $@10 statement_list $@11 '}' . $@12 else_statement

    $default  reduce using rule 90 ($@12)

    $@12  go to state 281


State 281

   91 else_statement: . ELIF '(' expression ')' @9 '{' $@10 statement_list $@11 '}' $@12 else_statement
   91               | ELIF '(' expression ')' @9 '{' $@10 statement_list $@11 '}' $@12 . else_statement
   94               | . ELSE '{' $@13 statement_list $@14 '}'
   95               | . %empty  [BREAK, CHAR, CONTINUE, FLOAT, FOR, IF, INT, RETURN, SIZEOF, BOOL, STRING, INC_OP, DEC_OP, C_CONST, S_CONST, B_CONST, I_CONST, F_CONST, IDENTIFIER, PRINT, PRINTS, LEN, VAR, NULL_, MALLOC, '(', '+', '-', '!', '*', '&', '}']

    ELSE  shift, and go to state 260
    ELIF  shift, and go to state 261

    $default  reduce using rule 95 (else_statement)

    else_statement  go to state 282


State 282

   91 else_statement: ELIF '(' expression ')' @9 '{' $@10 statement_list $@11 '}' $@12 else_statement .

    $default  reduce using rule 91 (else_statement)
